 @using Umbraco.Cms.Core.Models
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<BlockGridItem>
@inject Umbraco.Cms.Core.Web.IUmbracoContextAccessor _contextAccessor

@{
    bool IsArabic = true;
    var widget = (Widget_ImportantLinks)Model.Content;
   
}

@if (widget.HideWidget is false)
{
    var allItems = widget.Links;

    var importantLinks = allItems?.Where(x => x.Content.Value<string>(nameof(ImportantLink.Category)) == "ImportantLinks" &&
                                              x.Content.Value<bool>(nameof(ImportantLink.Hide)) is false)
                                  .OrderBy(x => x.Content.Value<int>(nameof(ImportantLink.ItemOrder)));
    var relatedLinks = allItems?.Where(x => x.Content.Value<string>("category") == "RelatedLinks" &&
                                              x.Content.Value<bool>(nameof(ImportantLink.Hide)) is false)
                                .OrderBy(x => x.Content.Value<int>(nameof(ImportantLink.ItemOrder)));
    if (_contextAccessor.TryGetUmbracoContext(out var context))
    {
        var culture = context.PublishedRequest?.Culture?.ToLower() ?? "";
        if (culture.Contains("en"))
        {
            IsArabic = false;
        }
    }
    <div class="bg-light py-5 importantLinks">
        <div class="px-0 px-xl-5">
            <div class="container-fluid">
                <div class="d-flex justify-content-between align-items-center gap-3 mb-3">
                    <h3 class="font-bold"> @widget.Title</h3>
                </div>
            </div>
        </div>
        <div class="py-2">
            <div class="px-0 px-xl-5 ">
                <div class="container-fluid">
                    <ul class="nav nav-underline" id="myTab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="tab1" data-bs-toggle="tab" data-bs-target="#tab1-pane" type="button" role="tab" aria-controls="tab1-pane" aria-selected="true">
                                @widget.ImportantTab
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="tab2" data-bs-toggle="tab" data-bs-target="#tab2-pane" type="button" role="tab" aria-controls="tab2-pane" aria-selected="false">
                                @widget.RelatedTab
                            </button>
                        </li>

                    </ul>

                    <div class="tab-content" id="myTabContent">
                        <div class="tab-pane fade show active" id="tab1-pane" role="tabpanel" aria-labelledby="tab1" tabindex="0">
                            <div class="py-4">
                                <div class="owl-carousel owl-theme owl-importantlinks">
                                    @foreach (var item in importantLinks)
                                    {
                                        BuildTab((ImportantLink)item.Content);
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="tab2-pane" role="tabpanel" aria-labelledby="tab2" tabindex="0">
                            <div class="py-4">
                                <div class="owl-carousel owl-theme owl-importantlinks">
                                    @foreach (var item in relatedLinks)
                                    {
                                        BuildTab((ImportantLink)item.Content);
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

    </div>
}

@{
    void BuildTab(ImportantLink item)
    {
        if (item != null)
        {

            var ImageUrl = item?.Icon?.Url();
            var imgAltText = item?.Icon?.Value<string>(nameof(Image.AltText));
            var itemUrl = item?.Link.ToLinkURL();
            <div class="item">
                <div class="importantLinks-item border bg-white rounded-4 p-3 d-flex flex-column align-items-start">
                    <div class="icon bg-green-50 rounded-circle d-flex align-items-center justify-content-center mb-4">
                        <img src="@ImageUrl" alt="@imgAltText" width="20" height="22" />

                    </div>
                    <h5 class="mb-4 font-bold">
                        <a href="@itemUrl">
                            @item?.Title
                        </a>
                    </h5>
                    <p class="flex-grow-1 d-flex align-items-start" style="height:50px; overflow:hidden;">
                        @item?.Description?.ToTrimLetters(120)
                    </p>
                    <a href="@itemUrl" class="btn bg-white d-flex align-items-center gap-2 font-medium border text-black">
                        <i class="bi bi-arrow-right"></i>
                    </a>
                </div>
            </div>

        }
    }
}
