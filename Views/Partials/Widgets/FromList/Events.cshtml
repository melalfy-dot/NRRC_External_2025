@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<BlockGridContentModel>
@using Custom.ViewModel
@using NRRC_External_2025.Models.Custom
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Core.Routing
@using Umbraco.Extensions
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject IPublishedUrlProvider IPublishedUrlProvider


@if (Model is not null)
{
    var _Widget = (Widget_ItemsFromList)Model?.BlockGridItem?.Content;
    if (_Widget != null && _Widget.HideWidget is false)
    {
        @* var items = Model?.PublishedContentItem?
                         .ChildrenOfType(Dt_NewsItem.ModelTypeAlias)?
                         .Where(x => x.Value<bool>(nameof(Dt_EventsItem.Hide)) is false)
                          .OrderByDescending(p => p.Value<DateTime>(nameof(Dt_NewsItem.Date)))
                          .ToList(); *@

        var items = Model?.PublishedContentItem?
                       .ChildrenOfType(Dt_EventsItem.ModelTypeAlias)?
                        .OrderByDescending(p => p.Value<DateTime>(nameof(Dt_EventsItem.DateStart)))
                        .ToList();


        if (Model.isHomePage)
        {
            <div class="py-5 events">
                <div class="px-0 px-xl-5">
                    <div class="container-fluid">
                        <div class="d-flex justify-content-between align-items-center gap-3 mb-3">
                            @if (Model.isHomePage)
                            {
                                <h3 class="font-bold">@_Widget?.Title</h3>
                                var readMoreLink = _Widget?.ReadMoreLink.ToLinkURL("");
                                <a class="btn bg-transparent d-flex align-items-center gap-2 font-bold border" href="@_Widget?.ReadMoreLink.ToLinkURL("")">
                                    <span>@_Widget?.ReadMoreLink?.Name</span>
                                </a>
                            }
                        </div>
                        <div class="py-4">
                            <div class="owl-carousel owl-theme owl-events">
                                @if (items != null && items.Count() > 0)
                                {
                                    if (_Widget?.MaxRecords > 0)
                                    {
                                        items = items?.Take(_Widget.MaxRecords).ToList();
                                    }
                                    foreach (Dt_EventsItem item in items)
                                    {
                                        var ImageUrl = item?.Image?.Url(IPublishedUrlProvider);
                                        var imgAltText = item?.Image?.Value<string>(nameof(Image.AltText));


                                        <div class="item">
                                            <div class="events-item border bg-white rounded-4 p-3 d-flex flex-column align-items-start">
                                                <div class="d-flex align-items-center gap-2 mb-3">

                                                    <img src="/images/calendar-dark-icon.svg" alt="" data-uw-rm-alt="SVG" height="22" width="22" style="width: 22px;" />
                                                    <span class="font-medium">@item?.DateStart.ToDateTime44()</span>
                                                </div>
                                                <h6 class="mb-2 d-flex align-items-center gap-1" role="heading" aria-level="4">
                                                    <i class="bi bi-geo-alt"></i><span>@item?.Location</span>
                                                </h6>
                                                <p class="flex-grow-1 d-flex align-items-start" style="height: 50px; overflow:hidden;">
                                                    @item.ToPageTitle()
                                                </p>

                                                <a class="btn bg-white d-flex align-items-center gap-2 font-medium border text-black" href="@item?.Url(IPublishedUrlProvider)">
                                                    <i class="bi bi-arrow-right"></i>
                                                </a>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="px-0 px-xl-5 py-5">
                <div class="container-fluid">
                    <!-- Search Input -->
                    <div class="row mb-4">
                        <div class="col-lg-6 col-md-8">
                            <div class="inner-search-box border px-3 py-2 d-flex align-items-center gap-3 rounded-2">
                                <div class="icon">
                                    <img src="\images\search-dark-icon.svg" alt="بحث" />
                                </div>
                                <input id="eventSearch" type="text" class="form-control border-0 bg-transparent w-100" placeholder="أدخل كلمة البحث..." onkeyup="filterEvents()" />
                            </div>
                        </div>
                    </div>

                    <!-- No Results Alert -->
                    <div id="noEventResults" class="alert alert-warning d-none text-center">لا توجد نتائج مطابقة لبحثك.</div>

                    <!-- Events Grid -->
                    <div class="row gx-sm-4 gy-4" id="eventContainer">
                        @foreach (Dt_EventsItem item in items)
                        {
                            var title = item.ToPageTitle();
                            var location = item.Value<string>(nameof(Dt_EventsItem.Location)) ?? "";
                            var date = item.Value<DateTime?>(nameof(Dt_EventsItem.DateStart))?.ToString("dd/MM/yyyy") ?? "";
                            var summary = item.ToPageTitle();
                            var url = item.Url(IPublishedUrlProvider);

                            <div class="col-12 col-sm-6 col-lg-4 col-xl-3 event-card">
                                <div class="events-item border bg-white rounded-4 p-3 d-flex flex-column justify-content-between h-100 align-items-start">
                                    <div class="d-flex align-items-center gap-2 mb-3 date">
                                        <img src="/images/calendar-dark-icon.svg" alt="calendar" />
                                        <span class="font-medium">@date</span>
                                    </div>
                                    <h6 class="mb-2 d-flex align-items-center gap-1"><i class="bi bi-geo-alt"></i><span>@location</span></h6>
                                    <p class="flex-grow-1 d-flex align-items-start" style="height: 50px; overflow: hidden;">@summary</p>
                                    <a href="@url" class="btn bg-white d-flex align-items-center gap-2 font-medium border text-black">
                                        <i class="bi bi-arrow-right"></i>
                                    </a>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    <div class="col-12 d-flex justify-content-center mt-5">
                        <nav class="Page navigation example">
                            <div class="pagination">
                                <span id="eventPagination" class="d-flex flex-row" dir="rtl"></span>
                            </div>
                        </nav>
                    </div>
                </div>
            </div>
            <script>
                const eventItemsPerPage = 4;
                let currentEventPage = 1;
                let filteredEvents = [];

                document.addEventListener("DOMContentLoaded", () => {
                    filteredEvents = Array.from(document.querySelectorAll(".event-card"));
                    setupEventPagination();
                    showEventPage();
                });

                function filterEvents() {
                    const searchVal = document.getElementById("eventSearch").value.toLowerCase();
                    const allCards = Array.from(document.querySelectorAll(".event-card"));
                    filteredEvents = [];

                    allCards.forEach(card => {
                        const text = card.innerText.toLowerCase();
                        const match = text.includes(searchVal);
                        card.style.display = match ? "" : "none";
                        if (match) filteredEvents.push(card);
                    });

                    document.getElementById("noEventResults").classList.toggle("d-none", filteredEvents.length > 0);
                    currentEventPage = 1;
                    setupEventPagination();
                    showEventPage();
                }

                function setupEventPagination() {
                    const container = document.getElementById("eventPagination");
                    container.innerHTML = "";
                    const totalPages = Math.ceil(filteredEvents.length / eventItemsPerPage);
                    if (totalPages <= 1) return;

                    const prev = createEventPageLink("bi bi-chevron-left", () => {
                        if (currentEventPage > 1) {
                            currentEventPage--;
                            showEventPage();
                        }
                    });
                    container.appendChild(prev);
                    container.appendChild(document.createTextNode('\u00A0'));

                    for (let i = 1; i <= totalPages; i++) {
                        const link = createEventPageLink(i, () => {
                            currentEventPage = i;
                            showEventPage();
                        });
                        if (i === currentEventPage) link.classList.add("active");
                        container.appendChild(link);
                        container.appendChild(document.createTextNode('\u00A0'));
                    }

                    const next = createEventPageLink("bi bi-chevron-right", () => {
                        if (currentEventPage < totalPages) {
                            currentEventPage++;
                            showEventPage();
                        }
                    });
                    container.appendChild(next);
                }

                function createEventPageLink(content, clickHandler) {
                    const a = document.createElement("a");
                    a.className = typeof content === "string" && content.includes("bi")
                        ? `page-link ${content} d-flex align-items-center`
                        : "page-link";
                    a.href = "#";
                    if (typeof content === "number") a.innerText = content;
                    a.onclick = function (e) {
                        e.preventDefault();
                        clickHandler();
                    };
                    return a;
                }

                function showEventPage() {
                    const start = (currentEventPage - 1) * eventItemsPerPage;
                    const end = start + eventItemsPerPage;

                    filteredEvents.forEach((card, i) => {
                        card.style.display = (i >= start && i < end) ? "" : "none";
                    });

                    const pageLinks = document.querySelectorAll("#eventPagination .page-link");
                    pageLinks.forEach(link => link.classList.remove("active"));
                    const active = Array.from(pageLinks).find(link => link.innerText === currentEventPage.toString());
                    if (active) active.classList.add("active");
                }
            </script>


        }

    }


}


