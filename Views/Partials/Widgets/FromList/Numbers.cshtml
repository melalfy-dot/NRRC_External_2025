@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<BlockGridContentModel>
@using Custom.ViewModel
@using NRRC_External_2025.Models.Custom
@using Umbraco.Cms.Core.Models.Blocks
@using Umbraco.Cms.Core.Routing
@using Umbraco.Extensions
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject IPublishedUrlProvider IPublishedUrlProvider


@if (Model is not null)
{
    var _Widget = (Widget_ItemsFromList)Model?.BlockGridItem?.Content;
    if (_Widget != null && _Widget.HideWidget is false)
    {
        var items = Model?.PublishedContentItem?
                         .ChildrenOfType(DT_NumbersItem.ModelTypeAlias)?
                         .Where(x => x.Value<bool>(nameof(DT_NumbersItem.Hide)) is false)
                          .OrderBy(p => p.Value<int>(nameof(DT_NumbersItem.ItemOrder)))
                          .ToList();
        var readMoreLink = _Widget?.ReadMoreLink.ToLinkURL("");
        <div class="bg-gray py-5 statistics">
            <div class="px-0 px-xl-5">
                <div class="container-fluid">
                    <div class="d-flex justify-content-between align-items-center gap-3 mb-3">
                        @*  @if (Model.isHomePage)
                        { *@
                        <h3 class="font-bold">@_Widget?.Title</h3>

                        <a class="btn bg-transparent d-flex align-items-center gap-2 font-bold border" href="@_Widget?.ReadMoreLink.ToLinkURL("")">
                            <span>@_Widget?.ReadMoreLink?.Name</span>
                        </a>
                        @*  } *@ 
                            </div>
                    @_Widget?.Details
                    @*<p class="mb-4">@_Widget?.Details</p> *@ 
               </div>
            </div>
            <div class="px-0 px-xl-5 py-4 authority-count">
                <div class="container-fluid">
                    <div class="d-flex justify-content-center align-items-center gap-4 flex-wrap">

                        @if (items != null && items.Count() > 0)
                        {
                            if (_Widget?.MaxRecords > 0)
                            {
                                items = items?.Take(_Widget.MaxRecords).ToList();
                            }
                            foreach (DT_NumbersItem item in items)
                            {
                                var ImageUrl = item?.IconI?.Url(IPublishedUrlProvider);
                                var imgAltText = item?.IconI?.Value<string>(nameof(Image.AltText));
                                <div class="statistics-item bg-white rounded-4 p-3 d-flex flex-column align-items-center">
                                    <div class="icon bg-green-50 rounded-circle d-flex align-items-center justify-content-center mb-4">
                                        <img src="@ImageUrl" alt="@imgAltText" width="28" height="28" />
                                    </div>
                                    <h1 class="text-green-dark font-regular mb-2">
                                        <span class="counter-count" data-count="@item?.Number">@item?.Number</span>
                                        @item?.OperationCharacter
                                     @*    @{
                                            var numberString = item?.Number ?? "0";
                                            var parsed = 0;
                                            int.TryParse(numberString, out parsed);

                                            <span class="counter-count">@parsed</span>

                                            @item?.OperationCharacter
                                        } *@
                                    </h1>
                                    <p>
                                        @item.ToPageTitle()
                                    </p>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}