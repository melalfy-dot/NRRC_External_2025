@using Umbraco.Cms.Core.Routing
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<BlockGridItem>
@inject IPublishedValueFallback PublishedValueFallback
@inject IPublishedUrlProvider IPublishedUrlProvider

@{
    // var currentPage = Umbraco.AssignedContentItem;
    // var lastUpdated = currentPage?.UpdateDate; // Get the last updated date
    var rootPage = Umbraco.Content(Umbraco.AssignedContentItem.Root().Id);
    var lastUpdated = rootPage?.UpdateDate;
    var _Widget = (Widget_FooterLinks)Model.Content;
    <footer class="bg-green-dark text-white py-5">
        <div class="container">
            @if (_Widget != null && _Widget.Links != null && _Widget.Links.Count > 0 && _Widget.HideWidget is false)
            {
                var AllMenus = _Widget.Links.Where(a => !a.Content.Value<Boolean>(nameof(Widget_ListOfLinks.HideWidget)));
                if (AllMenus != null && AllMenus.Count() > 0)
                {
                    var Menu_1 = AllMenus?.FirstOrDefault(a => a.Content.Value<string>(nameof(Widget_ListOfLinks.Category)) == "Menu 1");
                    var Menu_2 = AllMenus?.FirstOrDefault(a => a.Content.Value<string>(nameof(Widget_ListOfLinks.Category)) == "Menu 2");
                    var Menu_3 = AllMenus?.FirstOrDefault(a => a.Content.Value<string>(nameof(Widget_ListOfLinks.Category)) == "Menu 3");
                    var SocialLinksMenu = AllMenus?.FirstOrDefault(a => a.Content.Value<string>(nameof(Widget_ListOfLinks.Category)) == "Social Links Menu");
                    var LastLinks = AllMenus?.FirstOrDefault(a => a.Content.Value<string>(nameof(Widget_ListOfLinks.Category)) == "Last Links");
                    var CopyRights = AllMenus?.FirstOrDefault(a => a.Content.Value<string>(nameof(Widget_ListOfLinks.Category)) == "Copy Rights");
                    var Logos = AllMenus?.FirstOrDefault(a => a.Content.Value<string>(nameof(Widget_ListOfLinks.Category)) == "Logos");

                    <div class="row gx-sm-5 mb-5">
                        @{
                            draw_MenuLinks(Menu_1);
                            draw_MenuLinks(Menu_2);
                            draw_MenuLinks(Menu_3);
                            draw_SocialLinks(SocialLinksMenu);
                        }
                    </div>

                    <div class="row mb-4 gx-sm-5">
                        @{
                            draw_LastLinks(LastLinks, CopyRights);
                            draw_Logos(Logos);
                        }
                    </div>
                }
            }
        </div>
    </footer>
}

@{
    void draw_MenuLinks(BlockListItem? MenuLinks)
    {
        if (MenuLinks != null)
        {
            var categoryLinks = (Widget_ListOfLinks)MenuLinks.Content;
            var links = categoryLinks.Links?.Where(a => a.Content.Value<Boolean>(nameof(LinkItem.Hide)) is false);

            <div class="col-lg-3 col-sm-6 col-12 mb-4">
                <div class="footer-head font-M border-bottom border-white-light pb-2 mb-2">
                    @categoryLinks.Title
                </div>
                <ul class="lh-lg px-0">
                    @if (links != null)
                    {
                        foreach (var item in links)
                        {
                            var _Item = (LinkItem)item.Content;
                            <li>
                                <a href="@_Item?.Link?.Url" target="@_Item?.Link?.Target"> @_Item?.Title </a>
                            </li>
                        }
                    }
                </ul>

            </div>
        }

    }
    void draw_SocialLinks(BlockListItem? SocialLinks)
    {
        var categoryLinks = SocialLinks != null ? (Widget_ListOfLinks)SocialLinks.Content : null;
        var links = categoryLinks?.Links?.Where(a => a.Content.Value<Boolean>(nameof(LinkItem.Hide)) is false);
        <div class="col-lg-3 col-sm-6 col-12 mb-4">
            <div class="footer-head font-M border-bottom border-white-light pb-2 mb-2">
                @categoryLinks?.Title
            </div>

            <ul class="social-links d-flex gap-3 align-items-center mb-5 px-0 pt-2">
                @if (links != null)
                {
                    foreach (var item in links)
                    {
                        var _Item = (LinkItem)item.Content;
                        var IconOrImageUrl = _Item?.IconOrImage?.Url(IPublishedUrlProvider);
                        var imgAltText = _Item?.IconOrImage?.Value<string>(nameof(Image.AltText));

                        <li>
                            <a class="border border-white-light rounded-2 p-2" href="@_Item?.Link?.Url" target="@_Item?.Link?.Target">
                                <img src="@IconOrImageUrl" alt="@imgAltText">
                            </a>
                        </li>
                    }
                }
            </ul>

            

        </div>
    }
    void draw_LastLinks(BlockListItem? LastLinks, BlockListItem? copyRights)
    {

        var categoryLinks = LastLinks != null ? (Widget_ListOfLinks)LastLinks.Content : null;

        var links = categoryLinks?.Links?.Where(a => a.Content.Value<Boolean>(nameof(LinkItem.Hide)) is false);

        <div class="col-lg-9 col-sm-6 col-12 mb-4">
            <ul class="d-flex gap-3 mb-4 px-0">
                @if (links != null)
                {
                    foreach (var item in links)
                    {
                        var _Item = (LinkItem)item.Content;
                        <li>
                            <a class="text-decoration-underline" href="@_Item?.Link?.Url" target="@_Item?.Link?.Target"> @_Item?.Title </a>
                        </li>
                    }
                }
            </ul>
            @if (copyRights != null)
            {
                var _copyRights = (Widget_ListOfLinks)copyRights.Content;
                <h6 class="font-M">
                    @_copyRights.Title @DateTime.Now.Year
                </h6>
                @if (lastUpdated is not null && lastUpdated.HasValue)
                {
                    var UpdatedaDate_trans = Umbraco.GetDictionaryValue("Latest_Updatated_Date");
                    <span>@UpdatedaDate_trans  @lastUpdated.Value.ToString("dd/MM/yyyy")</span>
                }
            }

        </div>
    }
    void draw_Logos(BlockListItem? Logos)
    {
        if (Logos != null)
        {
            var categoryLinks = (Widget_ListOfLinks)Logos.Content;
            var links = categoryLinks.Links?.Where(a => a.Content.Value<Boolean>(nameof(LinkItem.Hide)) is false);
            <div class="col-lg-3 col-sm-6 col-12 mb-4">
                <div class="row footer-logos">

                    @if (links != null)
                    {
                        foreach (var item in links)
                        {
                            var _Item = (LinkItem)item.Content;
                            var Url = _Item?.Link.ToLinkURL();
                            var IconOrImageUrl = _Item?.IconOrImage?.Url(IPublishedUrlProvider);
                            var imgAltText = _Item?.IconOrImage?.Value<string>(nameof(Image.AltText));
                            <div class="col-sm-6 col-12 mb-4 text-center">
                                <a class="d-flex h-100 align-items-center" href="@Url" target="@_Item.Link?.Target">
                                    <img src="@IconOrImageUrl" alt="@imgAltText" >
                                </a>
                            </div>
                        }
                    }
                </div>
            </div>
        }

    }
}


